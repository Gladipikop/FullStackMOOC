{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaska\\\\ProgrammingStuff\\\\TestMOOCThings\\\\osa1.6 -1.12\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Statistics = props => {\n  if (props.stats.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No Feedback given\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 6,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(StatisticLine, {\n        text: \"good\",\n        value: props.stats[\"good\"]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n        text: \"neutral\",\n        value: props.stats[\"good\"]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n        text: \"bad\",\n        value: props.stats[\"good\"]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n        text: \"good\",\n        value: props.stats[\"good\"]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n        text: \"good\",\n        value: props.stats[\"good\"]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_c = Statistics;\n\nconst StatisticLine = ({\n  text,\n  value\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [text, \" \", value]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = StatisticLine;\n\nconst Sum = props => {\n  let sum = 0;\n\n  for (let i = 0; i < props.length; i++) {\n    sum += props[i];\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: sum\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}; // return (\n//   <div>\n//     <tr>\n//       <td>Hi, I'm your first cell.</td>\n//       <td>I'm your second cell.</td>\n//       <td>I'm your third cell.</td>\n//       <td>I'm your fourth cell.</td>\n//     </tr>\n//   </div>\n// )\n\n\n_c3 = Sum;\n\nconst App = () => {\n  _s();\n\n  // tallenna napit omaan tilaansa\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  let statistics = {\n    stats: [{\n      text: 'good',\n      count: good\n    }, {\n      text: 'neutral',\n      count: neutral\n    }, {\n      text: 'bad',\n      count: bad\n    }, {\n      text: 'all',\n      count: good + neutral + bad\n    }, {\n      text: 'good',\n      count: good\n    }, {\n      text: 'average',\n      count: (good - bad) / (good + neutral + bad)\n    }, {\n      text: 'positive',\n      count: good / (good + neutral + bad)\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"give feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setGood(good + 1),\n      children: \"good\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setNeutral(neutral + 1),\n      children: \"neutral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setBad(bad + 1),\n      children: \"bad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      stats: statistics\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n\n_c4 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Statistics\");\n$RefreshReg$(_c2, \"StatisticLine\");\n$RefreshReg$(_c3, \"Sum\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"sources":["C:/Users/jaska/ProgrammingStuff/TestMOOCThings/osa1.6 -1.12/src/App.js"],"names":["React","useState","Statistics","props","stats","length","StatisticLine","text","value","Sum","sum","i","App","good","setGood","neutral","setNeutral","bad","setBad","statistics","count"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nconst Statistics = (props) => {\n  if (props.stats.length === 0) {\n    return (\n      <div>\n        <p>No Feedback given</p>\n      </div>\n    )\n  } else {\n    return (\n      <div>\n        <StatisticLine text=\"good\" value={props.stats[\"good\"]}/>\n        <StatisticLine text=\"neutral\" value={props.stats[\"good\"]}/>\n        <StatisticLine text=\"bad\" value={props.stats[\"good\"]}/>\n        <StatisticLine text=\"good\" value={props.stats[\"good\"]}/>\n        <StatisticLine text=\"good\" value={props.stats[\"good\"]}/>\n      </div>\n    )\n  }\n}\n\nconst StatisticLine = ({text, value}) => {\n  return (\n    <div>\n      <p>{text} {value}</p>\n    </div>\n  )\n}\nconst Sum = (props) => {\n  let sum = 0;\n  for (let i = 0; i < props.length; i++) {\n      sum += props[i];\n    }\n  return (\n    <p>{sum}</p>\n  )\n}\n\n  // return (\n  //   <div>\n  //     <tr>\n  //       <td>Hi, I'm your first cell.</td>\n  //       <td>I'm your second cell.</td>\n  //       <td>I'm your third cell.</td>\n  //       <td>I'm your fourth cell.</td>\n  //     </tr>\n  //   </div>\n  // )\nconst App = () => {\n  // tallenna napit omaan tilaansa\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n  let statistics = {\n    stats: [\n      {\n        text: 'good',\n        count: good\n      },\n      {\n        text: 'neutral',\n        count: neutral\n      },{\n        text: 'bad',\n        count: bad\n      },{\n        text: 'all',\n        count: good + neutral + bad\n      },\n      {\n        text: 'good',\n        count: good\n      },\n      {\n        text: 'average',\n        count: (good - bad) / (good + neutral + bad)\n      },\n      {\n        text: 'positive',\n        count: (good) / (good + neutral + bad)\n      },\n    ]\n  }\n\n  return (\n    <div>\n      <h1>give feedback</h1>\n      <button onClick={() => setGood(good + 1)}>good</button>\n      <button onClick={() => setNeutral(neutral + 1)}>neutral</button>\n      <button onClick={() => setBad(bad + 1)}>bad</button>\n\n\n      <h1>statistics</h1>\n      <Statistics stats={statistics}/>\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}